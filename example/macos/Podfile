platform :osx, '13.01'

# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'ephemeral', 'Flutter-Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure \"flutter pub get\" is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Flutter-Generated.xcconfig, then run \"flutter pub get\""
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_macos_podfile_setup

target 'Runner' do
  use_frameworks!
  use_modular_headers!

  flutter_install_all_macos_pods File.dirname(File.realpath(__FILE__))
  target 'RunnerTests' do
    inherit! :search_paths
  end
end

post_install do |installer|
  installer.pods_project.targets.each do |target|
    flutter_additional_macos_build_settings(target)
  end

  # Add script phase to Runner app target to create libykpiv symlinks
  app_project = Xcodeproj::Project.open(File.join(File.dirname(__FILE__), 'Runner.xcodeproj'))
  app_project.targets.each do |target|
    if target.name == 'Runner'
      # Remove existing script phase with same name if it exists
      target.shell_script_build_phases.each do |phase|
        if phase.name == 'Create libykpiv symlinks'
          target.build_phases.delete(phase)
        end
      end

      # Add new script phase
      phase = target.new_shell_script_build_phase('Create libykpiv symlinks')
      phase.shell_script = <<-SCRIPT
        # Create symlinks for libykpiv in the app bundle
        # This runs after CocoaPods copies vendored libraries to the app bundle
        FRAMEWORKS_PATH="${BUILT_PRODUCTS_DIR}/${FRAMEWORKS_FOLDER_PATH}"

        if [ -d "$FRAMEWORKS_PATH" ]; then
          cd "$FRAMEWORKS_PATH"

          # Find the versioned libykpiv library
          LIBYKPIV=$(find . -maxdepth 1 -name "libykpiv.*.*.*.dylib" -type f 2>/dev/null | head -n 1)

          if [ -n "$LIBYKPIV" ]; then
            LIB_NAME=$(basename "$LIBYKPIV")
            TEMP="${LIB_NAME#libykpiv.}"
            FULL_VERSION="${TEMP%.dylib}"
            MAJOR_VERSION="${FULL_VERSION%%.*}"

            echo "[ykpiv_desktop] Creating symlinks for $LIB_NAME (version $FULL_VERSION)"

            # Create symlinks
            ln -sf "$LIB_NAME" "libykpiv.${MAJOR_VERSION}.dylib"
            ln -sf "$LIB_NAME" "libykpiv.dylib"

            echo "[ykpiv_desktop] Symlinks created successfully"
          else
            echo "[ykpiv_desktop] Warning: libykpiv library not found in $FRAMEWORKS_PATH"
          fi
        fi
      SCRIPT
      # Mark this phase to run before compilation to ensure symlinks exist when needed
      phase.always_out_of_date = "1"
    end
  end
  app_project.save
end
